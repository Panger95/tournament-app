{"version":3,"sources":["assets/socials/facebook-brands.svg","assets/socials/linkedin-brands.svg","assets/socials/twitter-brands.svg","assets/socials/youtube-brands.svg","Components/Header/Header.js","Components/Settings/Form/List/List.jsx","Data/action-types.js","Data/actions.js","Components/Settings/Form/List/index.js","Components/Settings/Form/Form.js","Components/Settings/Form/index.js","Components/Footer/Footer.jsx","Components/Settings/Settings.js","Components/Settings/index.js","Components/Match/Match.js","Components/Match/index.js","Components/Round/index.js","Components/Round/Round.js","matchCreater.js","Components/Champion/index.js","Components/Champion/Champion.jsx","Components/Tournament/Tournament.js","Components/Tournament/index.js","Components/App/App.js","Components/App/index.js","serviceWorker.js","Data/initial.js","services.js","Data/reducer.js","Data/store.js","index.js"],"names":["module","exports","Header","className","List","players","numOfPlayers","map","player","index","key","name","RESET","nameSpace","addPlayer","payload","type","reset","submit","submitWinners","selectWinner","roundId","connect","state","playerName","submitted","dispatch","value","actions","createTournament","Form","props","nameError","playerErrors","handleAdd","bind","handleChange","e","this","setState","currentTarget","playersError","preventDefault","trim","includes","document","getElementById","id","onChange","placeholder","onClick","Component","Footer","src","Facebook","alt","LinkedIn","Twitter","Youtube","Settings","playerId","find","Match","winner","matchId","handlePlayer1","handlePlayer2","play1","play2","round","match","style","pointerEvents","player1","player2","rounds","winners","champion","roundsPlayed","totalRounds","previousMatch","undefined","reduce","acc","current","push","matchCreater","Tournament","App","Boolean","window","location","hostname","initial","shuffle","a","i","length","j","Math","floor","random","addMatchId","reducer","action","log2","final","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","persistState","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1db54190.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/facebook-brands.53757d93.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin-brands.1e01f0c0.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter-brands.37332e64.svg\";","module.exports = __webpack_public_path__ + \"static/media/youtube-brands.c80ca203.svg\";","import React from \"react\";\nimport './header.scss';\n\n\nlet Header = () => (\n    <header className=\"page-header text-center headerFont mb-5\">\n        <h1>The Tournament App</h1>\n        <p>Battle it out with friends and family!</p>\n    </header>\n);\n\nexport default Header;","import React from 'react';\nimport './list.scss';\n\n\nconst List = ( {players, numOfPlayers}) => {\n    return (\n        <div className=\"text-left mt-4 d-flex justify-content-center flex-column\">\n            <p>Players who have qualified for this tournament are...</p>\n            <ul className=\"list-group mt-3 mb-3 d-flex flex-column\">\n                {players.map((player, index) => \n                    <li className={ `p-2 pad list-group-item list-group-item${ numOfPlayers === 4 || numOfPlayers === 8 || numOfPlayers === 16 ? '-success' : '' }` }key={ index }>\n                        {index + 1 }. {player.name}\n                    </li>\n                )}\n            </ul>\n            <p className={ `text-center d-${ numOfPlayers > 0 ? 'block' : 'none' }`}><span className={ `badge badge-${ numOfPlayers%2 === 0 ? 'success' : 'danger'}` }>{ numOfPlayers%2 === 0 ? 'Ready to start the Tournament!' : 'Please enter an even amount of players'}\n                        </span></p>\n            <p className={ `text-center greenFont` }>{ numOfPlayers === 4 || numOfPlayers === 8 || numOfPlayers === 16 ? \"This would be a great size for a tournament!\" : ''}</p>\n        </div>\n    )\n}\n\nexport default List;","const nameSpace = \"TOURNAMENT\"\n\nexport const ADD_PLAYER = nameSpace + \"/ADD_PLAYER\"\nexport const RESET = nameSpace + \"/RESET\"\nexport const SUBMIT = nameSpace + \"/SUBMIT\"\nexport const WINNER = nameSpace + \"WWINNER\"\nexport const SUBMIT_WINNERS = nameSpace + \"/SUBMIT_WINNER\"\nexport const SELECT_WINNER = nameSpace + \"/SELECT_WINNER\"\n","import { ADD_PLAYER, RESET, SUBMIT, SUBMIT_WINNERS, SELECT_WINNER } from './action-types'\n\nexport const addPlayer = (payload) => ({\n    type: ADD_PLAYER,\n    payload,\n})\n\nexport const reset = () => ({\n    type: RESET,\n})\n\nexport const submit = () => ({\n    type: SUBMIT,\n})\n\nexport const submitWinners = () => ({\n    type: SUBMIT_WINNERS,\n})\n\nexport const selectWinner = ( roundId, name) => ({\n    type: SELECT_WINNER,\n    roundId,\n    name,\n})\n\n\n\n","import { connect } from 'react-redux';\nimport List from './List';\nimport { actions } from '../../../../Data';\n\nconst mapStateToProps = state => ({\n    playerName: state.playerName,\n    players: state.players,\n    numOfPlayers: state.numOfPlayers,\n    submitted: state.submitted, \n})\n\nconst mapDispatchToProps = dispatch => ({\n    addPlayer: value => dispatch(actions.addPlayer(value)),\n    createTournament: () => dispatch(actions.submit()),\n    reset: () => dispatch(actions.reset()),\n})\n\nexport default connect( mapStateToProps, mapDispatchToProps)(List)\n","import React, { Component } from 'react';\nimport List from'./List';\nimport './form.scss'\n\n\n\n\nclass Form extends Component {\n\n    constructor(props){\n        super(props)\n        this.state ={\n            name: \"\",\n            players: [],\n            nameError: false,\n            playerErrors: false,\n        }\n        this.handleAdd = this.handleAdd.bind(this);\n        this.handleChange =this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({\n            name: e.currentTarget.value,\n            nameError: false,\n            playersError: false,\n        });\n    }\n\n    handleAdd(e) {\n        e.preventDefault();\n        let name = this.state.name.trim();\n        let { addPlayer } =this.props;\n\n        if( name !== \"\" && !this.state.players.includes(name)) {\n            addPlayer(document.getElementById(\"player_name\").value)\n            this.setState({name: '', players:[...this.state.players, name]});\n        } else {\n            this.setState({\n                nameError: true,\n            });\n        }\n    }\n\n\n    render() {\n        let {createTournament, reset} = this.props;\n        let { nameError, name } = this.state;\n        let nameErrorMessage = \"Sorry we can't have any duplicate names or blanks, please check the player names and try again\";\n\n        return (\n            <>\n                <form className=\"add-player container\">\n                    <div className=\"form-group\">\n                        <label> Enter Player Names:</label>\n                        <input \n                            id=\"player_name\" \n                            onChange={ (e) => this.handleChange(e)}\n                            type=\"text\" \n                            placeholder=\"Jasper Carrot\" \n                            className={ `form-control border border-${ nameError ? \"danger\" : null }` }\n                            value={ name } \n                            />\n                        <p className=\"error\">{ nameError ? nameErrorMessage : null }</p>\n                    </div>\n                    <button onClick={ (e) => this.handleAdd(e) } className=\"button\">Add Player</button>\n                </form>\n                <List />\n                <button className=\"button mb-4\" onClick={ createTournament }>Start Tournament</button>\n                <br></br>\n                <button className=\"btn button rounded-pill mb-5\" onClick={ reset }>Change your mind? Enter player names again</button>\n            </>\n        )   \n    }\n}\nexport default Form","import { connect } from 'react-redux';\nimport Form from './Form';\nimport { actions } from '../../../Data';\n\nconst mapStateToProps = state => ({\n    playerName: state.playerName,\n    players: state.players,\n    numOfPlayers: state.numOfPlayers,\n    submitted: state.submitted, \n})\n\nconst mapDispatchToProps = dispatch => ({\n    addPlayer: value => dispatch(actions.addPlayer(value)),\n    createTournament: () => dispatch(actions.submit()),\n    reset: () => dispatch(actions.reset()),\n})\n\nexport default connect( mapStateToProps, mapDispatchToProps)(Form)\n","import React from \"react\";\nimport \"./Footer.scss\";\nimport Facebook from \"../../assets/socials/facebook-brands.svg\";\nimport LinkedIn from \"../../assets/socials/linkedin-brands.svg\";\nimport Twitter from \"../../assets/socials/twitter-brands.svg\";\nimport Youtube from \"../../assets/socials/youtube-brands.svg\";\n\n\nconst Footer = () => (\n    <footer>\n        <div className=\"socials\">\n        <img src={Facebook} className=\"App-logo\" alt=\"logo\" /> \n        <img src={LinkedIn} className=\"App-logo\" alt=\"logo\" />  \n        <img src={Twitter} className=\"App-logo\" alt=\"logo\" />  \n        <img src={Youtube} className=\"App-logo\" alt=\"logo\" />  \n  \n        </div>\n    </footer>\n)\n\nexport default Footer;","import React from 'react';\nimport './settings.css';\nimport Header from '../Header/Header'\nimport Form from './Form';\nimport Footer from '../Footer/Footer'\n\n\n// FIRST PAGE OF APP WHERE USER ENTERS PLAYER NAMES //\n\nconst Settings = () => {\n    return (\n        <div className=\"text-center\">\n            <Header />\n            <Form />\n            <Footer />  \n        </div>\n    )\n}\n\nexport default Settings;","import { connect } from 'react-redux';\nimport Settings from './Settings';\nimport { actions } from '../../Data';\n\nconst mapStateToProps = state => ({\n    playerName: state.playerName,\n    players: state.players,\n    numOfPlayers: state.numOfPlayers,\n    submitted: state.submitted, \n})\n\nconst mapDispatchToProps = dispatch => ({\n    addPlayer: value => dispatch(actions.addPlayer(value)),\n    createTournament: () => dispatch(actions.submit()),\n    reset: () => dispatch(actions.reset()),\n})\n\nexport default connect( mapStateToProps, mapDispatchToProps)(Settings)\n","import React, { Component } from 'react'\n\n\nconst playerName = (players, playerId) => \nplayers.find(player => player.name === playerId).name\n// we pass in first player item from the rounds array and playerID (stored in player1/player2 key) of the player clicked on, if the player id matches the playerId of the player object, we return the players.name\n\n\nclass Match extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            winner: 0,\n            matchId: 0,\n        }\n        this.handlePlayer1 = this.handlePlayer1.bind(this)\n        this.handlePlayer2 = this.handlePlayer2.bind(this)\n    }\n\n    handlePlayer1(roundId, play1, matchId) {\n        this.props.selectWinner(roundId, play1);\n        this.setState( {winner: 1, matchId: matchId} );\n    } \n\n    handlePlayer2(roundId, play2, matchId) {\n        this.props.selectWinner(roundId, play2);\n        this.setState( {winner: 2, matchId: matchId} );\n\n    }\n\n    render() {\n        let { round, key, match } = this.props;\n        let { winner, matchId } =this.state;\n        const style = {}\n        if(winner !== 0){\n            style.pointerEvents = \"none\"\n        } else {\n            style.pointerEvents = \"auto\"\n        }\n        return (\n            <>\n                    <li key={ key } style={ style } className={ `list-group-item text-center mb-3 p-5 }`}>\n                        <p>Match {match.id + 1} </p>\n                        <span \n                            className={ `border p-3 m-3 list-group-item list-group-item-${ winner === 1 && matchId === match.id ?\"success\": null }` } \n                            onClick={() => this.handlePlayer1(match.roundId, match.player1, match.id) }>\n                            {playerName(round, match.player1)}\n                        </span>\n\n                        <p className=\"text-center m-4\"> vs </p>\n                        \n                        <span \n                            className={ `border p-3 m-3 list-group-item list-group-item-${ winner === 2 && matchId === match.id ?\"success\": null }` } \n                            onClick={() => this.handlePlayer2(match, match.player2, match.id) }>\n                            {playerName(round, match.player2)}\n                        </span>\n                    </li>\n            </>\n        )\n    }\n}\n\nexport default Match;\n\t\n//On click of a player box, the playerName function checks if the player in the rounds array (all players) has the same matchId","import { connect } from 'react-redux';\nimport Match from './Match';\nimport * as actions from \"../../Data/actions\";\n\nconst mapStateToProps = ({rounds, numOfPlayers, submitted, players, winners, champion}, {match, key}) => ({\n    rounds: rounds,\n    numOfPlayers: numOfPlayers,\n    submitted: submitted,\n    players: players,\n    winners: winners, \n    match: match,\n    key: key,\n})\n\nconst mapDispatchToProps = dispatch => ({\n\tselectWinner: (id, name) => dispatch(actions.selectWinner(id, name)),\n    submitWinners: () => dispatch(actions.submitWinners()),\n    reset: () => dispatch(actions.reset()),\n})\n\nexport default connect( mapStateToProps, mapDispatchToProps)(Match)\n","\nimport { connect } from 'react-redux';\nimport { Round }  from './Round';\nimport * as actions from \"../../Data/actions\";\n\nconst mapStateToProps = state => ({\n    rounds: state.rounds,\n    numOfPlayers: state.numOfPlayers,\n    submitted: state.submitted,\n    players: state.players,\n    winners: state.winners, \n    roundsPlayed: state.roundsPlayed,\n    totalRounds: state.totalRounds,\n    champion: state.champion,\n})\n\nconst mapDispatchToProps = dispatch => ({\n\tselectWinner: (id, name) => dispatch(actions.selectWinner(id, name)),\n    submitWinners: () => dispatch(actions.submitWinners()),\n    reset: () => dispatch(actions.reset()),\n})\n\nexport default connect( mapStateToProps, mapDispatchToProps)(Round)\n","import React from 'react'\nimport './round.css'\nimport Match  from '../Match';\nimport { matchCreater } from '../../matchCreater';\n\n\nexport const Round = ({ totalRounds, rounds, reset, submitWinners }) =>{\n\n\treturn (\n\t<>\n\t\t\t{ rounds.map((round, index) =>\n\t\t\t\t<div className=\"d-flex align-items-center flex-column col-3\">\n\t\t\t\t\t<h1 className=\"text-left align-self-center pl-2 headerFont\">\n\t\t\t\t\t\t { (index + 1) === totalRounds ? \"Final\" : `Round: ${(index + 1)}` }\n\t\t\t\t\t</h1>\n\t\t\t\t\n\t\t\t\t\t<ul className=\"m-2 p-0\">\n\t\t\t\t\t\t{ matchCreater(round).map(match => // maps through the matches created by the matchCreater \n\t\t\t\t\t\t\t <Match \n\t\t\t\t\t\t\t\tkey={ index }\n\t\t\t\t\t\t\t\tround={ round }\n\t\t\t\t\t\t\t\tmatch={ match }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ul>\n\n\t\t\t\t\t<p> Click on the player to progress to the next round </p>\n\n\t\t\t\t\t<button \n\t\t\t\t\t\tclassName={ `btn btn-danger rounde-pill `} \n\t\t\t\t\t\tonClick={ submitWinners }>\n\t\t\t\t\t\t{ (index + 1) === totalRounds ? `Select the Champion` : `Progress to Round ${(index + 2)}` }</button>\n\t\t\t\t\t<br></br>\n\t\t\t\t\t<button className=\"btn btn-primary rounded-pill\" onClick={ reset }>reset</button>\n\t\t\t\t</div>\n\t\t\t)}\n\t</>\n\t)\n}\n\n\t","export const matchCreater = (players) => {\n\tlet matchId = 0\n\tlet previousMatch = undefined\n\treturn players.reduce((acc, current) => {\n\t\tif(previousMatch && current.matchId === previousMatch.matchId) { \n\t\t\tacc.push({\n\t\t\t\tid: matchId,\n\t\t\t\tplayer1: previousMatch.name,\n\t\t\t\tplayer2: current.name,\n\t\t\t\troundId: current.roundId\n\t\t\t})\n\t\t\tmatchId ++\n\t\t}\n\t\tpreviousMatch = current\n\t\treturn acc\n\t}, [])\n}\n\n// EXPLANATION OF matchCreater FUNCTION\n\n//. 1. matchId  variable created with initial value of 0. This will be used to delcare the 'id' key value in the newly formed match object. \n\n// 2. previousMatch variable created to store curreNT, which will be the first object in the players array.\n\n// 3. REDUCE FUNCTION:  stores first item (player) of the players array (passed in from Round.js) to previousMatch variable.\n\n// 4.  IF STATEMENT: If the next item (player) in the array has the same matchId as the player stored in the previousMatch variable then...\n\n// 5. EXECUTION BLOCK: ...an object is created with both players' player Ids  as values stored in keys player1, player 2 respectively.\n\n// 6. The matchId is stored in key \"id\". first time will be its initial value of 0\n\n// 7. Finally this new object is pushed onto the empty accumulator array (empty for first iteration only)\n\n// 8. The match Id is then incremented so that each new match object has a unique id.\n\nexport const winnerCheck = (players, playerName) => {\n\tlet previousMatch = undefined\n\treturn players.reduce((acc, current) => {\n\t\tif(previousMatch && current.name === playerName) { \n\t\t\tacc = true\n\t\t}\n\t\tpreviousMatch = current\n\t\treturn acc\n\t}, false)\n}","import { connect } from 'react-redux';\nimport { Champion } from './Champion';\nimport * as actions from \"../../Data/actions\";\n\n\nconst mapStateToProps = state => ({\n    champion: state.champion,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    reset: () => dispatch(actions.reset()),\n})\n\nexport default connect( mapStateToProps, mapDispatchToProps)(Champion)\n","import React from 'react';\nimport './champion.scss';\n\n// const championes = () => {\n//     let { champion } = this.props;\n\n//     let strHTML = '';\n//     let vtop = 0;\n//     let vleft = 0;\n\n//     const style = {\n//         top: 0,\n//         left: 0,\n//     }\n\n//     for (let i = 0; i < 100; i++){\n//         vtop += 5;\n//         vleft += 5;\n//         strHTML += \"<span className='winnerStart winnerPost' style={ style.top:\" + vtop + \"; style.left:\" + vleft + \"}>{ this.props.champion }</span>\";\n//     }\n//     document.getElementById(\"divOutput\").innerHTML = strHTML;\n// }\n\n\nexport const Champion = ( {champion, reset }) => {\n    return (\n        <div className=\"champion\">\n            <h1 className='headerFont text-center'> And the Championship goes to....</h1>\n            <div className=\"winner\">\n                <p>{ champion }</p>\n            </div> \n            <button className=\"btn btn-primary rounded-pill\" onClick={ reset }>Start New Tournament</button>\n            <div id=\"divOutput\"></div>\n        </div>\n    )\n}\n\n\n","import React from 'react';\nimport './tournament.scss';\nimport Header from '../Header/Header';\nimport Round from '../Round';\nimport Champion from '../Champion';\n\n\nlet Tournament = ( {champion}) => {\n  \n\n    return (\n        <div className=\"fluid-container\">\n          \n          <Header />\n                <div className=\"row m-0\">\n                    { champion !== null ? <Champion /> : <Round /> }  \n                </div>\n        </div>\n    )\n}\n             \n            \nexport default Tournament;","import { connect } from 'react-redux';\nimport Tournament  from './Tournament';\nimport * as actions from \"../../Data/actions\";\n\nconst mapStateToProps = state => ({\n    rounds: state.rounds,\n    numOfPlayers: state.numOfPlayers,\n    submitted: state.submitted, \n    totalRounds: state.totalRounds,\n    champion: state.champion,\n})\n\nconst mapDispatchToProps = dispatch => ({\n\taddPlayer: value => dispatch(actions.addPlayer(value)),\n\tcreateTournament: () => dispatch(actions.submit()),\n})\n\nexport default connect( mapStateToProps, mapDispatchToProps)(Tournament)\n","import React from 'react';\nimport Settings  from '../Settings';\nimport Tournament from '../Tournament';\n\nimport './App.scss';\n//import { BrowserRouter as Router, Route } from 'react-router-dom';\n\nfunction App( {submitted, champion} ) {\n  return (\n   <> \n    <div className=\"my-container\">\n      { !submitted ? <Settings /> : <Tournament /> }\n    </div>\n   </>\n  );\n}\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from './App';\n//import { actions } from '../../Data';\n\nconst mapStateToProps = state => ({\n    submitted: state.submitted,\n    \n})\n\nconst mapDispatchToProps = dispatch => ({\n    \n})\n\nexport default connect( mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initial = {\n    playerName: \"\",\n    numOfPlayers: 0,\n    players:[],\n    rounds: [],\n    totalRounds: null,\n    roundsPlayed: 0,\n    submitted: false,\n    champion: null,\n}\n\nexport default initial;\n\n\n               ","// taken from github\n\nexport const shuffle = (a) => {\n\tfor (let i = a.length - 1; i > 0; i--) {\n\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t[a[i], a[j]] = [a[j], a[i]];\n\t}\n\treturn a;\n}\n\n","import { ADD_PLAYER, RESET, SUBMIT, SUBMIT_WINNERS, SELECT_WINNER } from './action-types'\nimport initial from './initial'\nimport {shuffle} from \"../services\";\n\n\nconst addMatchId = (players) => {\n\tlet matchId = 0\n\treturn players.map((player, index) => {\n\n\t\tindex % 2 === 0 && matchId++\n\n\t\treturn ({ ...player, matchId })\n\t})\n}\n\n\nlet reducer = (state, action) => {\n    \n    switch(action.type) {\n        case (ADD_PLAYER): {\n            // \n            return ({\n                ...state,\n                players:[...state.players,  {\n                            id: (state.players.length +1),\n                            name: action.payload,\n                            roundId: 1,\n                        }],\n                numOfPlayers: state.numOfPlayers +=1,\n            })\n        }\n        case (SELECT_WINNER): {\n            // \n            return ({\n                ...state,\n                players:[...state.players,  {\n                            id: (state.players.length +1),\n                            name: action.name,\n                            roundId: action.roundId +=1,\n                        }],\n                champion: state.totalRounds === state.rounds.length ? action.name : null,\n            })\n        }\n\n        case (RESET): {\n            return ({\n                ...initial,\n            })\n        }\n        case (SUBMIT): {\n            return ({\n                ...state,\n                players: [],\n                rounds: [ ...state.rounds, state.rounds.length ? addMatchId(state.players) : addMatchId(shuffle(state.players)) ],\n                submitted: state.submitted = true,\n                numOfPlayers: state.players.length,\n                totalRounds: Math.log2(state.players.length),\n            })\n        }\n        case (SUBMIT_WINNERS): {\n                return ({\n                    ...state,\n                    players: [],\n                    rounds: [ ...state.rounds, addMatchId(state.players)],\n                    roundsPlayed: state.roundsPlayed + 1,\n                    final: (state.roundsPlayed + 1) === state.totalRounds ? true : false, \n\n                })\n        }\n        \n        default: return state;\n    }\n};\n\nexport default reducer;","import { createStore, compose } from \"redux\";\nimport reducer from \"./reducer\";\nimport initial from \"./initial\";\nimport persistState from \"redux-localstorage\";\n\nconst composeEnhancers = \n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose ;\n\nconst store = createStore( \n    reducer,\n    initial, \n    composeEnhancers(persistState())\n);\n\n\nexport default store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport store from \"./Data/store\"\n\n\n// wrap Router with provider - connects the entire app to the store, store can be accessed anywhere in the app\nReactDOM.render(\n    <Provider store={ store }>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["Components/Settings/Settings.js","Data/action-types.js","Data/actions.js","Components/Settings/index.js","Components/Header/Header.js","Components/Tournament/Round/Round.js","Components/Tournament/Round/index.js","Components/Tournament/matchCreater.js","Components/Tournament/Tournament.js","Components/Tournament/index.js","Components/App/App.js","Components/App/index.js","serviceWorker.js","Data/initial.js","Components/Tournament/services.js","Data/reducer.js","Data/store.js","index.js"],"names":["handleAdd","addPlayer","e","preventDefault","document","getElementById","value","Settings","players","createTournament","reset","numOfPlayers","className","onSubmit","id","type","map","player","index","key","name","onClick","RESET","nameSpace","payload","submit","submitWinners","selectWinner","connect","state","playerName","submitted","dispatch","actions","Header","playerId","find","rounds","winners","round","matchId","previousMatch","undefined","reduce","acc","current","push","player1","player2","matchCreater","match","Tournament","App","Boolean","window","location","hostname","initial","shuffle","a","i","length","j","Math","floor","random","addMatchId","reducer","action","roundId","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","persistState","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ccd6ab4.chunk.js","sourcesContent":["import React from 'react';\nimport './settings.css';\n\nconst handleAdd = (addPlayer) => (e) => {\n    e.preventDefault()\n    addPlayer(document.getElementById(\"player_name\").value)\n    document.getElementById(\"player_name\").value = \"\";\n}\n\n// FIRST PAGE OF APP WHERE USER ENTERS PLAYER NAMES //\n\nconst Settings = ({ players, addPlayer, createTournament, reset, numOfPlayers }) => {\n\n    return (\n        <div className=\"text-center\">\n            \n            <h1 className=\"text-center headerFont\">Table Tennis Tournament App</h1>\n            <form onSubmit={ handleAdd(addPlayer) } className=\"add-player container\">\n                <div className=\"form-group\">\n                    <label> Name:</label>\n                    <input id=\"player_name\" type=\"text\" className={ `form-control border border` } />\n                </div>\n                <button className=\"btn btn-block btn-primary\">Add Player</button>\n            </form>\n\n            {/* PLAYER NAME LIST  */}\n\n            <div className=\"text-left\">\n                <ul className=\"list-group mt-3 mb-3\">\n                    {players.map((player, index) => \n                        <li className={ `list-group-item list-group-item${ numOfPlayers === 4 || numOfPlayers === 8 || numOfPlayers === 16 ? '-success' : '' }` }key={ index }>\n                            {index + 1 }. {player.name}\n                        </li>\n                    )}\n                </ul>\n                <p className={ `text-center d-${ numOfPlayers > 0 ? 'block' : 'none' }`}><span className={ `badge badge-${ numOfPlayers%2 === 0 ? 'success' : 'danger'}` }>{ numOfPlayers%2 === 0 ? 'Ready to start the Tournament!' : 'Please enter an even amount of players'}\n                            </span></p>\n                <p className={ `text-center greenFont` }>{ numOfPlayers === 4 || numOfPlayers === 8 || numOfPlayers === 16 ? \"This would be a great size for a tournament!\" : ''}</p>\n            </div>\n            <button className=\"btn btn-danger rounded-pill mt-3 mb-3\" onClick={ createTournament } >Create Tournament</button>\n            <br></br>\n            <button className=\"btn btn-primary rounded-pill\" onClick={ reset }>reset</button>\n        </div>\n    )\n}\n\nexport default Settings;","const nameSpace = \"TOURNAMENT\"\n\nexport const ADD_PLAYER = nameSpace + \"/ADD_PLAYER\"\nexport const RESET = nameSpace + \"/RESET\"\nexport const SUBMIT = nameSpace + \"/SUBMIT\"\nexport const WINNER = nameSpace + \"WWINNER\"\nexport const SUBMIT_WINNERS = nameSpace + \"/SUBMIT_WINNER\"\nexport const SELECT_WINNER = nameSpace + \"/SELECT_WINNER\"\n","import { ADD_PLAYER, RESET, SUBMIT, SUBMIT_WINNERS, SELECT_WINNER } from './action-types'\n\nexport const addPlayer = (payload) => ({\n    type: ADD_PLAYER,\n    payload,\n})\n\nexport const reset = () => ({\n    type: RESET,\n})\n\nexport const submit = () => ({\n    type: SUBMIT,\n})\n\nexport const submitWinners = () => ({\n    type: SUBMIT_WINNERS,\n})\n\nexport const selectWinner = ( name) => ({\n    type: SELECT_WINNER,\n    name,\n})\n\n\n\n","import { connect } from 'react-redux';\nimport Settings from './Settings';\nimport { actions } from '../../Data';\n\nconst mapStateToProps = state => ({\n    playerName: state.playerName,\n    players: state.players,\n    numOfPlayers: state.numOfPlayers,\n    submitted: state.submitted, \n})\n\nconst mapDispatchToProps = dispatch => ({\n    addPlayer: value => dispatch(actions.addPlayer(value)),\n    createTournament: () => dispatch(actions.submit()),\n    reset: () => dispatch(actions.reset()),\n})\n\nexport default connect( mapStateToProps, mapDispatchToProps)(Settings)\n","import React from \"react\";\nimport './header.css';\n\nlet Header = () => (\n    <header className=\"page-header headerFont mb-5\">\n        <h1>The Tournament App</h1>\n    </header>\n);\n\nexport default Header;","import React from 'react'\nimport { matchCreater, } from '../matchCreater';\nimport './round.css'\n\nconst playerName = (players, playerId) => \nplayers.find(player => player.name === playerId).name\n// we pass in first player item from the rounds array and playerID (stored in player1/player2 key) of the player clicked on, if the player id matches the playerId of the player object, we return the players.name\n\n\nexport const Round = ({ players, rounds, reset, submitWinners, numOfPlayers, selectWinner, winners }) =>{\n\n\treturn (\n\t<>\n\t\t\t{ rounds.map((round, index) =>\n\t\t\t\t<div className=\"d-flex align-items-center flex-column jumbotron\">\n\t\t\t\t\t<h1 className=\"text-left align-self-center pl-2 headerFont\">Round {index + 1}</h1>\n\t\t\t\t\t<ul className=\"m-2 p-0\">\n\t\t\t\t\t\t{ matchCreater(round).map(match => // maps through the matches created by the matchCreater \n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<li key={ index } className={ `list-group-item text-center mb-3 p-5 }`}>\n\t\t\t\t\t\t\t\t<span id=\"playerBox\" className={ `border p-3 m-3 list-group-item-${winners.find(player => player === match.player1) ? \"success disableEvent\" : \"primary\"} `} onClick={() => selectWinner(match.player1)}>\n\t\t\t\t\t\t\t\t{playerName(round, match.player1)}</span>\n\n\t\t\t\t\t\t\t\t<p className=\"text-center m-4\"> vs </p>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<span id=\"playerBox\" className={ `border p-3 m-3 list-group-item-${winners.find(player => player === match.player2) ? \"success disableEvent\" : \"primary\"} `} onClick={() => selectWinner(match.player2)}>{playerName(round, match.player2)}</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ul>\n\t\t\t\t\t<p> Click on the player to progress to the next round </p>\n\t\t\t\t\t<button className={ `btn btn-danger rounde-pill `} onClick={ submitWinners }>Submit Winners</button>\n\t\t\t\t\t<br></br>\n\t\t\t\t\t<button className=\"btn btn-primary rounded-pill\" onClick={ reset }>reset</button>\n\t\t\t\t</div>\n\t\t\t)}\n\t</>\n\t)\n}\n\n\t\n//On click of a player box, the playerName function checks if the player in the rounds array (all players) has the same matchId","\nimport { connect } from 'react-redux';\nimport { Round }  from './Round';\nimport * as actions from \"../../../Data/actions\";\n\nconst mapStateToProps = state => ({\n    rounds: state.rounds,\n    numOfPlayers: state.numOfPlayers,\n    submitted: state.submitted,\n    players: state.players,\n    winners: state.winners, \n})\n\nconst mapDispatchToProps = dispatch => ({\n\tselectWinner: (id, name) => dispatch(actions.selectWinner(id, name)),\n    submitWinners: () => dispatch(actions.submitWinners()),\n    reset: () => dispatch(actions.reset()),\n})\n\nexport default connect( mapStateToProps, mapDispatchToProps)(Round)\n","export const matchCreater = (players) => {\n\tlet matchId = 0\n\tlet previousMatch = undefined\n\treturn players.reduce((acc, current) => {\n\t\tif(previousMatch && current.matchId === previousMatch.matchId) { \n\t\t\tacc.push({\n\t\t\t\tid: matchId,\n\t\t\t\tplayer1: previousMatch.name,\n\t\t\t\tplayer2: current.name,\n\t\t\t})\n\t\t\tmatchId ++\n\t\t}\n\t\tpreviousMatch = current\n\t\treturn acc\n\t}, [])\n}\n\n// EXPLANATION OF matchCreater FUNCTION\n\n//. 1. matchId  variable created with initial value of 0. This will be used to delcare the 'id' key value in the newly formed match object. \n\n// 2. previousMatch variable created to store curreNT, which will be the first object in the players array.\n\n// 3. REDUCE FUNCTION:  stores first item (player) of the players array (passed in from Round.js) to previousMatch variable.\n\n// 4.  IF STATEMENT: If the next item (player) in the array has the same matchId as the player stored in the previousMatch variable then...\n\n// 5. EXECUTION BLOCK: ...an object is created with both players' player Ids  as values stored in keys player1, player 2 respectively.\n\n// 6. The matchId is stored in key \"id\". first time will be its initial value of 0\n\n// 7. Finally this new object is pushed onto the empty accumulator array (empty for first iteration only)\n\n// 8. The match Id is then incremented so that each new match object has a unique id.\n\nexport const winnerCheck = (players, playerName) => {\n\tlet previousMatch = undefined\n\treturn players.reduce((acc, current) => {\n\t\tif(previousMatch && current.name === playerName) { \n\t\t\tacc = true\n\t\t}\n\t\tpreviousMatch = current\n\t\treturn acc\n\t}, false)\n}","import React from 'react';\nimport './tournament.scss';\nimport Header from '../Header/Header';\nimport Round from './Round/';\n\n\nlet Tournament = () => {\n    return (\n        <div className=\"fluid-container\">\n          <Header />\n                <div className=\"row m-0\">\n                  <Round />   \n                </div>\n        </div>\n    )\n}\n             \n            \nexport default Tournament;","import { connect } from 'react-redux';\nimport Tournament  from './Tournament';\nimport * as actions from \"../../Data/actions\";\n\nconst mapStateToProps = state => ({\n    rounds: state.rounds,\n    numOfPlayers: state.numOfPlayers,\n    submitted: state.submitted, \n})\n\nconst mapDispatchToProps = dispatch => ({\n\taddPlayer: value => dispatch(actions.addPlayer(value)),\n\tcreateTournament: () => dispatch(actions.submit()),\n})\n\nexport default connect( mapStateToProps, mapDispatchToProps)(Tournament)\n","import React from 'react';\nimport Settings  from '../Settings';\nimport Tournament from '../Tournament';\nimport './App.scss';\n//import { BrowserRouter as Router, Route } from 'react-router-dom';\n\nfunction App( {submitted } ) {\n  return (\n   <>\n    { submitted ? <Tournament /> : <Settings /> }\n\n   </>\n  );\n}\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from './App';\n//import { actions } from '../../Data';\n\nconst mapStateToProps = state => ({\n    submitted: state.submitted,\n    \n})\n\nconst mapDispatchToProps = dispatch => ({\n    \n})\n\nexport default connect( mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initial = {\n    playerName: \"\",\n    numOfPlayers: 0,\n    players:\n    [],\n\trounds: [],\n    submitted: false,\n    winners:[],\n}\n\nexport default initial;\n\n\n               ","// taken from github\n\nexport const shuffle = (a) => {\n\tfor (let i = a.length - 1; i > 0; i--) {\n\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t[a[i], a[j]] = [a[j], a[i]];\n\t}\n\treturn a;\n}\n\n","import { ADD_PLAYER, RESET, SUBMIT, SUBMIT_WINNERS, SELECT_WINNER } from './action-types'\nimport initial from './initial'\nimport {shuffle} from \"../Components/Tournament/services\";\n\n\nconst addMatchId = (players) => {\n\tlet matchId = 0\n\treturn players.map((player, index) => {\n\n\t\tindex % 2 === 0 && matchId++\n\n\t\treturn ({ ...player, matchId })\n\t})\n}\n\n\nlet reducer = (state, action) => {\n    \n    switch(action.type) {\n        case (ADD_PLAYER): {\n            // \n            return ({\n                ...state,\n                players:[...state.players,  {\n                            id: (state.players.length +1),\n                            name: action.payload,\n                            roundId: 1,\n                        }],\n                numOfPlayers: state.numOfPlayers +=1,\n            })\n        }\n        case (SELECT_WINNER): {\n            // \n            return ({\n                ...state,\n                players:[...state.players,  {\n                            id: (state.players.length +1),\n                            name: action.name,\n                            roundId: 1,\n                        }],\n                winners:[...state.winners, action.name\n                ]\n            })\n        }\n\n        case (RESET): {\n            return ({\n                ...initial,\n            })\n        }\n        case (SUBMIT): {\n            return ({\n                ...state,\n                players: [],\n                rounds: [ ...state.rounds, state.rounds.length ? addMatchId(state.players) : addMatchId(shuffle(state.players)) ],\n                submitted: state.submitted = true,\n                numOfPlayers: state.players.length,\n            })\n        }\n        case (SUBMIT_WINNERS): {\n                return ({\n                    ...state,\n                    players: [],\n                    rounds: [ ...state.rounds, addMatchId(state.players)],\n                    winners: []\n                })\n        }\n        \n        default: return state;\n    }\n};\n\nexport default reducer;","import { createStore, compose } from \"redux\";\nimport reducer from \"./reducer\";\nimport initial from \"./initial\";\nimport persistState from \"redux-localstorage\";\n\nconst composeEnhancers = \n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose ;\n\nconst store = createStore( \n    reducer,\n    initial, \n    composeEnhancers(persistState())\n);\n\n\nexport default store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport store from \"./Data/store\"\n\n\n// wrap Router with provider - connects the entire app to the store, store can be accessed anywhere in the app\nReactDOM.render(\n    <Provider store={ store }>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
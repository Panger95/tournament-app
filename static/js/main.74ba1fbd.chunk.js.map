{"version":3,"sources":["assets/socials/facebook-brands.svg","assets/socials/linkedin-brands.svg","assets/socials/twitter-brands.svg","assets/socials/youtube-brands.svg","Components/Header/Header.js","Components/Settings/Form/List/List.jsx","Data/action-types.js","Data/actions.js","Components/Settings/Form/List/index.js","Components/Settings/Form/Form.js","Components/Settings/Form/index.js","Components/Footer/Footer.jsx","Components/Settings/Settings.js","Components/Settings/index.js","Components/Match/Match.js","Components/Match/index.js","Components/Round/index.js","Components/Round/Round.js","matchCreater.js","Components/Champion/index.js","Components/Champion/Champion.jsx","Components/Tournament/Tournament.js","Components/Tournament/index.js","Components/App/App.js","Components/App/index.js","serviceWorker.js","Data/initial.js","services.js","Data/reducer.js","Data/store.js","index.js"],"names":["module","exports","Header","champion","submitted","className","List","players","numOfPlayers","map","player","index","Number","isInteger","Math","log2","length","key","name","RESET","nameSpace","addPlayer","payload","type","reset","submit","submitWinners","selectWinner","roundId","connect","state","playerName","dispatch","value","actions","createTournament","Form","props","nameError","playerErrors","handleAdd","bind","handleChange","e","this","setState","currentTarget","playersError","preventDefault","capsName","charAt","toUpperCase","slice","capitalise","trim","includes","id","onChange","placeholder","onClick","classNam","handleStart","Component","Footer","src","Facebook","alt","LinkedIn","Twitter","Youtube","Settings","playerId","find","Match","winner","matchId","handlePlayer1","handlePlayer2","play1","play2","round","match","style","pointerEvents","player1","player2","rounds","winners","roundsPlayed","totalRounds","previousMatch","undefined","reduce","acc","current","push","matchCreater","class","height","width","xmlns","Tournament","App","Boolean","window","location","hostname","initial","shuffle","a","i","j","floor","random","addMatchId","reducer","action","final","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","persistState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74ba1fbd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/facebook-brands.53757d93.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin-brands.1e01f0c0.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter-brands.37332e64.svg\";","module.exports = __webpack_public_path__ + \"static/media/youtube-brands.c80ca203.svg\";","import React from \"react\";\nimport './header.scss';\n\n\nlet Header = ( champion, submitted ) => (\n    <header className=\"page-header text-center headerFont mb-5\">\n        <h1>{ champion !== '' ? \"Championes Championes Ole Ole Ole\" : \"The Ping Pong Tournament App\" }</h1>\n        <p> { submitted ? null : \"Battle it out with friends and family!\" }</p>\n    </header>\n);\n\nexport default Header;","import React from 'react';\nimport './list.scss';\n\n\nconst List = ( {players, numOfPlayers}) => {\n    return (\n        <div className=\"text-left mt-4 d-flex justify-content-center flex-column\">\n            <p>Players who have qualified for this tournament are...</p>\n            <ul className=\"list-group mt-3 mb-3 d-flex flex-column\">\n                {players.map((player, index) => \n                    <li className={ `p-2 pad list-group-item list-group-item${ Number.isInteger(Math.log2(players.length)) ? '-success' : null }` }key={ index }>\n                        {index + 1 }. {player.name}\n                    </li>\n                )}\n            </ul>\n        </div>\n    )\n}\n\nexport default List;","const nameSpace = \"TOURNAMENT\"\n\nexport const ADD_PLAYER = nameSpace + \"/ADD_PLAYER\"\nexport const RESET = nameSpace + \"/RESET\"\nexport const SUBMIT = nameSpace + \"/SUBMIT\"\nexport const WINNER = nameSpace + \"WWINNER\"\nexport const SUBMIT_WINNERS = nameSpace + \"/SUBMIT_WINNER\"\nexport const SELECT_WINNER = nameSpace + \"/SELECT_WINNER\"\n","import { ADD_PLAYER, RESET, SUBMIT, SUBMIT_WINNERS, SELECT_WINNER } from './action-types'\n\nexport const addPlayer = (payload) => ({\n    type: ADD_PLAYER,\n    payload,\n})\n\nexport const reset = () => ({\n    type: RESET,\n})\n\nexport const submit = () => ({\n    type: SUBMIT,\n})\n\nexport const submitWinners = () => ({\n    type: SUBMIT_WINNERS,\n})\n\nexport const selectWinner = ( roundId, name) => ({\n    type: SELECT_WINNER,\n    roundId,\n    name,\n})\n\n\n\n","import { connect } from 'react-redux';\nimport List from './List';\nimport { actions } from '../../../../Data';\n\nconst mapStateToProps = state => ({\n    playerName: state.playerName,\n    players: state.players,\n    numOfPlayers: state.numOfPlayers,\n    submitted: state.submitted, \n})\n\nconst mapDispatchToProps = dispatch => ({\n    addPlayer: value => dispatch(actions.addPlayer(value)),\n    createTournament: () => dispatch(actions.submit()),\n    reset: () => dispatch(actions.reset()),\n})\n\nexport default connect( mapStateToProps, mapDispatchToProps)(List)\n","import React, { Component } from 'react';\nimport List from'./List';\nimport './form.scss'\n\n\n\n\nclass Form extends Component {\n\n    constructor(props){\n        super(props)\n        this.state ={\n            name: \"\",\n            players: [],\n            nameError: false,\n            playerErrors: false,\n        }\n        this.handleAdd = this.handleAdd.bind(this);\n        this.handleChange =this.handleChange.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({\n            name: e.currentTarget.value,\n            nameError: false,\n            playersError: false,\n        });\n    }\n\n    handleAdd(e) {\n        e.preventDefault();\n        let { addPlayer } =this.props;\n        let name = this.state.name.trim();\n        let capitalise = (name) => {\n            return name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        let capsName = capitalise(name)\n\n        if( capsName !== \"\" && !this.state.players.includes(capsName)) {\n            addPlayer(capsName)\n            this.setState({name: '', players:[...this.state.players, capsName]});\n        } else {\n            this.setState({\n                nameError: true,\n            });\n        }\n    }\n\n    handleStart(e) {\n        e.preventDefault();\n\n        let { players } = this.props;\n\n        if (players.length >= 4 && Number.isInteger(Math.log2(players.length))) {\n            this.props.createTournament();\n        } else {\n            this.setState({\n                playersError: true,\n            });\n        }\n    }\n\n\n    render() {\n        let { reset } = this.props;\n        let { nameError, name, playersError } = this.state;\n        let nameErrorMessage = \"Sorry we can't have any duplicate names or blanks, please check the player names and try again\";\n        let playersErrorMessage = \"Don't forget! You need a minimum of 4 players. The number of players also needs to be a power of 2!\";\n\n        return (\n            <>\n                <form className=\"add-player container mt-5\">\n                    <div className=\"form-group mt-5\">\n                        <label> Enter Player Names:</label>\n                        <input \n                            id=\"player_name\" \n                            onChange={ (e) => this.handleChange(e)}\n                            type=\"text\" \n                            placeholder=\"Jasper Carrot\" \n                            className={ `form-control border border-${ nameError || playersError ? \"danger\" : null }` }\n                            value={ name } \n                            />\n                        <p className=\"error mt-2\">{ playersError ? playersErrorMessage : nameError ? nameErrorMessage : null }</p>\n                    </div>\n                    <button onClick={ (e) => this.handleAdd(e) } className=\"button\">Add Player</button>\n                </form>\n                <List />\n                <div classNam=\"btn-group m-5\">\n                    <button className=\"button m-5\" onClick={ (e) => this.handleStart(e) }>Start Tournament</button>\n                    <button className=\"button m-5\" onClick={ reset }>Start again</button>\n                </div>\n            </>\n        )   \n    }\n}\nexport default Form","import { connect } from 'react-redux';\nimport Form from './Form';\nimport { actions } from '../../../Data';\n\nconst mapStateToProps = state => ({\n    playerName: state.playerName,\n    players: state.players,\n    numOfPlayers: state.numOfPlayers,\n    submitted: state.submitted, \n})\n\nconst mapDispatchToProps = dispatch => ({\n    addPlayer: value => dispatch(actions.addPlayer(value)),\n    createTournament: () => dispatch(actions.submit()),\n    reset: () => dispatch(actions.reset()),\n})\n\nexport default connect( mapStateToProps, mapDispatchToProps)(Form)\n","import React from \"react\";\nimport \"./Footer.scss\";\nimport Facebook from \"../../assets/socials/facebook-brands.svg\";\nimport LinkedIn from \"../../assets/socials/linkedin-brands.svg\";\nimport Twitter from \"../../assets/socials/twitter-brands.svg\";\nimport Youtube from \"../../assets/socials/youtube-brands.svg\";\n\n\nconst Footer = () => (\n    <footer>\n        <div className=\"socials\">\n        <img src={Facebook} className=\"App-logo\" alt=\"logo\" /> \n        <img src={LinkedIn} className=\"App-logo\" alt=\"logo\" />  \n        <img src={Twitter} className=\"App-logo\" alt=\"logo\" />  \n        <img src={Youtube} className=\"App-logo\" alt=\"logo\" />  \n  \n        </div>\n    </footer>\n)\n\nexport default Footer;","import React from 'react';\nimport './settings.scss';\nimport Header from '../Header/Header'\nimport Form from './Form';\nimport Footer from '../Footer/Footer'\n\n\n// FIRST PAGE OF APP WHERE USER ENTERS PLAYER NAMES //\n\nconst Settings = () => {\n    return (\n        <div className=\"text-center\">\n            <Header />\n            <Form />\n            <Footer />  \n        </div>\n    )\n}\n\nexport default Settings;","import { connect } from 'react-redux';\nimport Settings from './Settings';\nimport { actions } from '../../Data';\n\nconst mapStateToProps = state => ({\n    playerName: state.playerName,\n    players: state.players,\n    numOfPlayers: state.numOfPlayers,\n    submitted: state.submitted, \n})\n\nconst mapDispatchToProps = dispatch => ({\n    addPlayer: value => dispatch(actions.addPlayer(value)),\n    createTournament: () => dispatch(actions.submit()),\n    reset: () => dispatch(actions.reset()),\n})\n\nexport default connect( mapStateToProps, mapDispatchToProps)(Settings)\n","import React, { Component } from 'react'\n\n\nconst playerName = (players, playerId) => \nplayers.find(player => player.name === playerId).name\n// we pass in first player item from the rounds array and playerID (stored in player1/player2 key) of the player clicked on, if the player id matches the playerId of the player object, we return the players.name\n\n\nclass Match extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            winner: 0,\n            matchId: 0,\n        }\n        this.handlePlayer1 = this.handlePlayer1.bind(this)\n        this.handlePlayer2 = this.handlePlayer2.bind(this)\n    }\n\n    handlePlayer1(roundId, play1, matchId) {\n        this.props.selectWinner(roundId, play1);\n        this.setState( {winner: 1, matchId: matchId} );\n    } \n\n    handlePlayer2(roundId, play2, matchId) {\n        this.props.selectWinner(roundId, play2);\n        this.setState( {winner: 2, matchId: matchId} );\n\n    }\n\n    render() {\n        let { round, key, match } = this.props;\n        let { winner, matchId } =this.state;\n        const style = {}\n        if(winner !== 0){\n            style.pointerEvents = \"none\"\n        } else {\n            style.pointerEvents = \"auto\"\n        }\n        return (\n            <>\n                    <li key={ key } style={ style } className={ `list-group-item list-group-item-primary text-center mb-1 p-3 }`}>\n                        <p>Match {match.id + 1} </p>\n                        <span \n                            className={ `border p-3 m-3 list-group-item list-group-item-${ winner === 1 && matchId === match.id ?\"success\": null }` } \n                            onClick={() => this.handlePlayer1(match.roundId, match.player1, match.id) }>\n                            {playerName(round, match.player1)}\n                        </span>\n\n                        <p className=\"text-center m-2\"> vs </p>\n                        \n                        <span \n                            className={ `border p-3 m-3 list-group-item list-group-item-${ winner === 2 && matchId === match.id ?\"success\": null }` } \n                            onClick={() => this.handlePlayer2(match, match.player2, match.id) }>\n                            {playerName(round, match.player2)}\n                        </span>\n                    </li>\n            </>\n        )\n    }\n}\n\nexport default Match;\n\t\n//On click of a player box, the playerName function checks if the player in the rounds array (all players) has the same matchId","import { connect } from 'react-redux';\nimport Match from './Match';\nimport * as actions from \"../../Data/actions\";\n\nconst mapStateToProps = ({rounds, players}, {match, key}) => ({\n    rounds: rounds,\n    players: players,\n    match: match,\n    key: key,\n})\n\nconst mapDispatchToProps = dispatch => ({\n\tselectWinner: (id, name) => dispatch(actions.selectWinner(id, name)),\n    submitWinners: () => dispatch(actions.submitWinners()),\n    reset: () => dispatch(actions.reset()),\n})\n\nexport default connect( mapStateToProps, mapDispatchToProps)(Match)\n","\nimport { connect } from 'react-redux';\nimport { Round }  from './Round';\nimport * as actions from \"../../Data/actions\";\n\nconst mapStateToProps = state => ({\n    rounds: state.rounds,\n    numOfPlayers: state.numOfPlayers,\n    submitted: state.submitted,\n    players: state.players,\n    winners: state.winners, \n    roundsPlayed: state.roundsPlayed,\n    totalRounds: state.totalRounds,\n    champion: state.champion,\n})\n\nconst mapDispatchToProps = dispatch => ({\n\tselectWinner: (id, name) => dispatch(actions.selectWinner(id, name)),\n    submitWinners: () => dispatch(actions.submitWinners()),\n    reset: () => dispatch(actions.reset()),\n})\n\nexport default connect( mapStateToProps, mapDispatchToProps)(Round)\n","import React from 'react'\nimport './round.css'\nimport Match  from '../Match';\nimport { matchCreater } from '../../matchCreater';\n\n\nexport const Round = ({ totalRounds, rounds, reset, submitWinners }) =>{\n\n\treturn (\n\t<>\n\t\t\t{ rounds.map((round, index) =>\n\t\t\t\t<div className=\"d-flex align-items-center flex-column col-3\">\n\t\t\t\t\t<h1 className=\"text-left align-self-center headerFont\">\n\t\t\t\t\t\t { (index + 1) === totalRounds ? \"Final\" : `Round: ${(index + 1)}` }\n\t\t\t\t\t</h1>\n\t\t\t\t\n\t\t\t\t\t<ul className=\"m-2 p-0\">\n\t\t\t\t\t\t{ matchCreater(round).map(match => // maps through the matches created by the matchCreater \n\t\t\t\t\t\t\t <Match \n\t\t\t\t\t\t\t\tkey={ index }\n\t\t\t\t\t\t\t\tround={ round }\n\t\t\t\t\t\t\t\tmatch={ match }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</ul>\n\n\t\t\t\t\t<p> Click on the player to progress to the next round </p>\n\n\t\t\t\t\t<button \n\t\t\t\t\t\tclassName={ `button`} \n\t\t\t\t\t\tonClick={ submitWinners }>\n\t\t\t\t\t\t{ (index + 1) === totalRounds ? `Select the Champion` : `Progress to Round ${(index + 2)}` }</button>\n\t\t\t\t\t<br></br>\n\t\t\t\t\t<button className=\"btn btn-danger rounded-pill\" onClick={ reset }>Start Again</button>\n\t\t\t\t</div>\n\t\t\t)}\n\t</>\n\t)\n}\n\n\t","export const matchCreater = (players) => {\n\tlet matchId = 0\n\tlet previousMatch = undefined\n\treturn players.reduce((acc, current) => {\n\t\tif(previousMatch && current.matchId === previousMatch.matchId) { \n\t\t\tacc.push({\n\t\t\t\tid: matchId,\n\t\t\t\tplayer1: previousMatch.name,\n\t\t\t\tplayer2: current.name,\n\t\t\t\troundId: current.roundId\n\t\t\t})\n\t\t\tmatchId ++\n\t\t}\n\t\tpreviousMatch = current\n\t\treturn acc\n\t}, [])\n}\n\n// EXPLANATION OF matchCreater FUNCTION\n\n//. 1. matchId  variable created with initial value of 0. This will be used to delcare the 'id' key value in the newly formed match object. \n\n// 2. previousMatch variable created to store curreNT, which will be the first object in the players array.\n\n// 3. REDUCE FUNCTION:  stores first item (player) of the players array (passed in from Round.js) to previousMatch variable.\n\n// 4.  IF STATEMENT: If the next item (player) in the array has the same matchId as the player stored in the previousMatch variable then...\n\n// 5. EXECUTION BLOCK: ...an object is created with both players' player Ids  as values stored in keys player1, player 2 respectively.\n\n// 6. The matchId is stored in key \"id\". first time will be its initial value of 0\n\n// 7. Finally this new object is pushed onto the empty accumulator array (empty for first iteration only)\n\n// 8. The match Id is then incremented so that each new match object has a unique id.\n\nexport const winnerCheck = (players, playerName) => {\n\tlet previousMatch = undefined\n\treturn players.reduce((acc, current) => {\n\t\tif(previousMatch && current.name === playerName) { \n\t\t\tacc = true\n\t\t}\n\t\tpreviousMatch = current\n\t\treturn acc\n\t}, false)\n}","import { connect } from 'react-redux';\nimport { Champion } from './Champion';\nimport * as actions from \"../../Data/actions\";\n\n\nconst mapStateToProps = state => ({\n    champion: state.champion,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    reset: () => dispatch(actions.reset()),\n})\n\nexport default connect( mapStateToProps, mapDispatchToProps)(Champion)\n","import React from 'react';\nimport './champion.scss';\n\n// const championes = () => {\n//     let { champion } = this.props;\n\n//     let strHTML = '';\n//     let vtop = 0;\n//     let vleft = 0;\n\n//     const style = {\n//         top: 0,\n//         left: 0,\n//     }\n\n//     for (let i = 0; i < 100; i++){\n//         vtop += 5;\n//         vleft += 5;\n//         strHTML += \"<span className='winnerStart winnerPost' style={ style.top:\" + vtop + \"; style.left:\" + vleft + \"}>{ this.props.champion }</span>\";\n//     }\n//     document.getElementById(\"divOutput\").innerHTML = strHTML;\n// }\n\n\nexport const Champion = ( {champion, reset }) => {\n    return (\n        <div className=\"champion\">\n            <h1 className='headerFont text-center'> And the Champion is, drum roll please! ....</h1>\n    \n            <div class=\"svg-wrapper mt-5\">\n                <svg height=\"60\" width=\"320\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect class=\"shape\" height=\"60\" width=\"320\" />\n                </svg>\n                <div class=\"text winner text-center\">{ champion }</div>\n            </div>\n\n            <button className=\"button mt-5\" onClick={ reset }>Start New Tournament</button>\n        </div>\n    )\n}\n\n\n","import React from 'react';\nimport './tournament.scss';\nimport Header from '../Header/Header';\nimport Round from '../Round';\nimport Champion from '../Champion';\n\n\nlet Tournament = ( {champion}) => {\n  \n\n    return (\n        <div className=\"fluid-container\">\n          \n          <Header />\n                <div className=\"row m-0\">\n                    { champion !== null ? <Champion /> : <Round /> }  \n                </div>\n        </div>\n    )\n}\n             \n            \nexport default Tournament;","import { connect } from 'react-redux';\nimport Tournament  from './Tournament';\nimport * as actions from \"../../Data/actions\";\n\nconst mapStateToProps = state => ({\n    rounds: state.rounds,\n    numOfPlayers: state.numOfPlayers,\n    submitted: state.submitted, \n    totalRounds: state.totalRounds,\n    champion: state.champion,\n})\n\nconst mapDispatchToProps = dispatch => ({\n\taddPlayer: value => dispatch(actions.addPlayer(value)),\n\tcreateTournament: () => dispatch(actions.submit()),\n})\n\nexport default connect( mapStateToProps, mapDispatchToProps)(Tournament)\n","import React from 'react';\nimport Settings  from '../Settings';\nimport Tournament from '../Tournament';\n\nimport './App.scss';\n//import { BrowserRouter as Router, Route } from 'react-router-dom';\n\nfunction App( {submitted, champion} ) {\n  return (\n   <> \n    <div className=\"my-container\">\n      { !submitted ? <Settings /> : <Tournament /> }\n      <div class=\"push\"></div>\n    </div>\n   </>\n  );\n}\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from './App';\n//import { actions } from '../../Data';\n\nconst mapStateToProps = state => ({\n    submitted: state.submitted,\n    \n})\n\nconst mapDispatchToProps = dispatch => ({\n    \n})\n\nexport default connect( mapStateToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initial = {\n    playerName: \"\",\n    numOfPlayers: 0,\n    players:[],\n    rounds: [],\n    totalRounds: null,\n    roundsPlayed: 0,\n    submitted: false,\n    champion: null,\n}\n\nexport default initial;\n\n\n               ","// taken from github\n\nexport const shuffle = (a) => {\n\tfor (let i = a.length - 1; i > 0; i--) {\n\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t[a[i], a[j]] = [a[j], a[i]];\n\t}\n\treturn a;\n}\n\n","import { ADD_PLAYER, RESET, SUBMIT, SUBMIT_WINNERS, SELECT_WINNER } from './action-types'\nimport initial from './initial'\nimport {shuffle} from \"../services\";\n\n\nconst addMatchId = (players) => {\n\tlet matchId = 0\n\treturn players.map((player, index) => {\n\n\t\tindex % 2 === 0 && matchId++\n\n\t\treturn ({ ...player, matchId })\n\t})\n}\n\n\nlet reducer = (state, action) => {\n    \n    switch(action.type) {\n        case (ADD_PLAYER): {\n            // \n            return ({\n                ...state,\n                players:[...state.players,  {\n                            id: (state.players.length +1),\n                            name: action.payload,\n                            roundId: 1,\n                        }],\n                numOfPlayers: state.numOfPlayers +=1,\n            })\n        }\n        case (SELECT_WINNER): {\n            // \n            return ({\n                ...state,\n                players:[...state.players,  {\n                            id: (state.players.length +1),\n                            name: action.name,\n                            roundId: action.roundId +=1,\n                        }],\n                champion: state.totalRounds === state.rounds.length ? action.name : null,\n            })\n        }\n\n        case (RESET): {\n            return ({\n                ...initial,\n            })\n        }\n        case (SUBMIT): {\n            return ({\n                ...state,\n                players: [],\n                rounds: [ ...state.rounds, state.rounds.length ? addMatchId(state.players) : addMatchId(shuffle(state.players)) ],\n                submitted: state.submitted = true,\n                numOfPlayers: state.players.length,\n                totalRounds: Math.log2(state.players.length),\n            })\n        }\n        case (SUBMIT_WINNERS): {\n                return ({\n                    ...state,\n                    players: [],\n                    rounds: [ ...state.rounds, addMatchId(state.players)],\n                    roundsPlayed: state.roundsPlayed + 1,\n                    final: (state.roundsPlayed + 1) === state.totalRounds ? true : false, \n\n                })\n        }\n        \n        default: return state;\n    }\n};\n\nexport default reducer;","import { createStore, compose } from \"redux\";\nimport reducer from \"./reducer\";\nimport initial from \"./initial\";\nimport persistState from \"redux-localstorage\";\n\nconst composeEnhancers = \n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose ;\n\nconst store = createStore( \n    reducer,\n    initial, \n    composeEnhancers(persistState())\n);\n\n\nexport default store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport store from \"./Data/store\"\n\n\n// wrap Router with provider - connects the entire app to the store, store can be accessed anywhere in the app\nReactDOM.render(\n    <Provider store={ store }>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}